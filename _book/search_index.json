[["index.html", "Knowledge Book Chapter 1 Prerequisites", " Knowledge Book Sonia García-Ruiz (s.ruiz@ucl.ac.uk) 2020-11-24 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc's Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. "],["intro.html", "Chapter 2 Murcia's Server - Web Deployment Arquitecture 2.1 R 2.2 Shiny Server 2.3 Apache Server", " Chapter 2 Murcia's Server - Web Deployment Arquitecture This R Markdown document contains the details about the architecture of web deployment established on the Murcia's server: IP: 155.54.237.9. Operating System: CentOS Linux release 7.5.1804 (Core) 2.1 R R is installed on the server on the path: &gt; Sys.getenv(&#39;R_HOME&#39;) [1] &quot;/usr/lib64/R&quot; The R version installed corresponds to: R version 3.5.1 (2018-07-02) -- &quot;Feather Spray&quot;. There are three different folders designated as R library paths. The folder &quot;/home_2/gsit/RLibrary&quot; was added as an additional library path to avoid problems derived from a lack of space in the main disc: &gt; .libPaths() [1] &quot;/home_2/gsit/RLibrary&quot; &quot;/usr/lib64/R/library&quot; &quot;/usr/share/R/library&quot; To install an R package on &quot;/home_2/gsit/RLibrary&quot;, you may want to type: install.packages(&#39;package_name&#39;, repos=&#39;http://cran.rstudio.com/&#39;, dependencies=T, lib=&#39;/home_2/gsit/RLibrary&#39;) 2.2 Shiny Server Shiny Server is an Open Source platform on which you can host multiple Shiny applications on a single server, each with their own URL or port. More info here. The Shiny Server version installed on the server corresponds to: &gt; system(&#39;shiny-server --version&#39;, intern = TRUE) [1] &quot;Shiny Server v1.5.14.948&quot; &quot;Node.js v12.18.0&quot; 2.2.1 Shiny Server Management Shiny Server uses the following configuration file: /etc/shiny-server/shiny-server.conf. Shiny Server has been initially configured to listen on port 4848. Different configurations are here allowed. However, for simplicity, it is recommended to host any Shiny App on the root directory &quot;/srv/shiny-server&quot;. Similarly, it is also recommended to store all log files on the directory &quot;/var/log/shiny-server&quot;. run_as shiny; # Define a server that listens on port 4848 server { listen 4848; # Define a location at the base URL location / { # Host the directory of Shiny Apps stored in this directory site_dir /srv/shiny-server; # Log all Shiny output to files in this directory log_dir /var/log/shiny-server; # When a user visits the base URL rather than a particular application, # an index of the applications available in this directory will be shown. directory_index on; } } Once your Shiny app has been moved to &quot;/srv/shiny-server/your-app&quot; and the configuration file has been updated, you may want to restart the Shiny Server and check its status: &gt; sudo systemctl restart shiny-server &gt; sudo systemctl status shiny-server ● shiny-server.service - ShinyServer Loaded: loaded (/etc/systemd/system/shiny-server.service; enabled; vendor preset: disabled) Active: active (running) since dom 2020-11-22 14:07:28 CET; 12min ago Process: 25079 ExecStopPost=/usr/bin/env sleep 5 (code=exited, status=0/SUCCESS) Main PID: 25099 (shiny-server) Tasks: 11 Memory: 16.5M CGroup: /system.slice/shiny-server.service └─25099 /home/opt/shiny-server/ext/node/bin/shiny-server /home/opt/shiny-server/lib/main.js Your app should be now reachable on &quot;127.0.0.1:4848/location&quot;. For instance, the default Shiny Server webpage can be tested by typing the following command: &gt; curl 127.0.0.1:4848/ 2.3 Apache Server The Apache Server is an open-source HTTP server available for different operating systems including UNIX and Windows (more info here). The Apache Server version installed on the Murcia's server corresponds to: &gt; httpd -v Server version: Apache/2.4.6 (CentOS) Server built: Nov 5 2018 01:47:09 2.3.1 Apache Server Management Whereas Apache Server uses the base configuration file &quot;/etc/httpd/conf/httpd.conf&quot;, each Apache module is installed at &quot;/etc/httpd/conf.d/&quot;. There is a module designated for the RytenLab group (&quot;/etc/httpd/conf.d/rytenlab.conf&quot;) that contains the configuration of all group's web apps (these are multiple REST APIs, ASP.NET Core web applications and one Docker Shiny App). The RytenLab module contains the configuration of two virtual hosts on the port :443 (SSL), one for the &quot;https://rytenlab.com&quot; domain and the other one to redirect the traffic from &quot;https://snca.atica.um.es&quot; to &quot;https://rytenlab.com&quot;. That means every time a user types &quot;https://snca.atica.um.es&quot;, it would be redirected to &quot;https://rytenlab.com&quot;. We established this configuration when we introduced the new &quot;https://rytenlab.com&quot; domain. Below an extract of the &quot;rytenlab.conf&quot; file in which the domain redirection is configured: &lt;VirtualHost *:443&gt; ServerName snca.atica.um.es ServerAlias snca.atica.um.es Redirect permanent / https://rytenlab.com/ RedirectMatch permanent ^/(.*)$ https://rytenlab.com/$1 SSLEngine on SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1 -SSLv2 SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5:!RC4 SSLHonorCipherOrder on SSLCipherSuite EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+R$ SSLCertificateFile /var/www/cert/certificado.pem SSLCertificateKeyFile /var/www/cert/privada.pem SSLCertificateChainFile /var/www/cert/certificado_conCA.pem &lt;/VirtualHost&gt; All web applications and web pages not belonging to the RytenLab group should be configured in a different configuration file within the path &quot;/etc/httpd/conf.d/&quot;. Please, make sure that none of the ports you would like to use are already being occupied by another web app. 2.3.2 Configure a Shiny Server app to be served by Apache Multiple configurations are possible when routing a Shiny App published by the Shiny Server through the Apache server. Below, there is an example of configuration. Let's suppose you have your Shiny App configured as follows on the &quot;/etc/shiny-server/shiny-server.conf&quot; file: run_as shiny; # Define a server that listens on port 4848 server { listen 4848; # Define a location at the base URL location /your_shiny_app { # Host the directory of Shiny Apps stored in this directory site_dir /srv/shiny-server/your_shiny_app; # Log all Shiny output to files in this directory log_dir /var/log/shiny-server; # When a user visits the base URL rather than a particular application, # an index of the applications available in this directory will be shown. directory_index on; } } The config you would then need to establish on your Apache module's file may be similar to: &lt;Proxy *&gt; Allow from localhost &lt;/Proxy&gt; RedirectMatch permanent ^/your_shiny_app$ /your_shiny_app/ RewriteEngine on RewriteCond %{HTTP:Upgrade} =websocket RewriteRule /your_shiny_app/(.*) ws://0.0.0.0:4848/your_shiny_app/$1 [P,L] RewriteCond %{HTTP:Upgrade} !=websocket RewriteRule /your_shiny_app/(.*) http://0.0.0.0:4848/your_shiny_app/$1 [P,L] ProxyPass /your_shiny_app/ http://0.0.0.0:4848/your_shiny_app/ connectiontimeout=3000 timeout=3000 ProxyPassReverse /your_shiny_app/ http://0.0.0.0:4848/your_shiny_app/ Header edit Location ^/ /your_shiny_app/ ProxyRequests Off After restarting both Shiny and Apache servers, your web application called &quot;your_shiny_app&quot; should be reachable at: &gt; sudo systemctl restart shiny-server &gt; sudo apachectl restart &gt; curl https://snca.atica.um.es/your_shiny_app/ ``` "],["github.html", "Chapter 3 GitHub", " Chapter 3 GitHub Here is a review of existing methods. "],["docker.html", "Chapter 4 Docker 4.1 Introduction 4.2 What is docker? 4.3 Images and containers 4.4 Docker Hub 4.5 Managing a docker object 4.6 Creating a docker object 4.7 Useful Commands", " Chapter 4 Docker 4.1 Introduction Nowadays, almost all companies and scientific labs which work with data are also becoming software producers. In some cases, the main reason for this software development is to publish effective scientific work. In other cases, its final aim might be just putting together a set of related functions that work for a similar final objective. However, in both cases, the final software product becomes highly shareable. This characteristic, the shareability of the software produced, might seem very straightforward but in reality, it can turn into a scaring daunting task to be solved. Why? Because of the heterogeneity of all different platforms, operating systems, dependencies, versioning and so on that our software product makes use of. Please, be aware that prior to its first release, our software product might have been tested in a limited number of PC stations with determined characteristics that can be extremely different from any other potential user's PC station around the world. All these reasons make Docker Platform really interesting and useful for both software producers and consumers. 4.2 What is docker? Docker is a software platform created in 2013 by Docker, Inc. which its main objective is to build, share, and run any app anywhere, independently of the platform and environment where it is executed. But what does this definition mean? It means that you admiringly can forget about dependencies, libraries, compatibility, etc. to make the app run correctly. To some extent, you could think Docker as a black box, as a snapshot of the developer's laptop where she or he developt the software you are about to make use of. A snapshot of the precise moment when the developer decided to release the software. Thus, everything you need to run the app is already there, installed and configured inside the Docker object, ready to be used, with no compatibility issues at all. 4.3 Images and containers Working with Docker, there are two main concepts you are going to hear about constantly: images and containers. An image is the virtual file or template that contains the whole set of instructions to build a container. An image is the raw Docker file you will directly download from Docker Hub developer's repository to your local. On the other hand, a container is the executable object directly generated from the image. A container will be the virtual object that represents the snapshot of the app developer's laptop. In summary, the image is the virtual file that contains the raw instructions to build the executable app, and the executable app is the container itself. 4.4 Docker Hub Docker Hub is an online platform that allows creating individual Docker repositories. A Docker repository is a personal account space where you can store one or more versions of the same Docker image, which are represented by tags. Let us focus on the following image obtained from the Ubuntu Docker Repository: 4.5 Managing a docker object 4.6 Creating a docker object 4.7 Useful Commands This page contains a list with some of the most common commands of Docker. To download a Docker image from Docker Hub: $ sudo docker push repository/name:tag To run the image name:tag. The flag --rm indicates to remove the container after stopping the image; whereas the flag -p indicates the port on which we want to expose the execution of the image: $ sudo docker run --rm -p 8500:80 name:tag To list all docker images that are available in our local: $ sudo docker images To remove the image image_name: $ sudo docker image rm image_name To remove all orphaned images: $ sudo docker rmi $(sudo docker images -f dangling=true -q) To list all current containers: $ sudo docker ps To list all stopped containers: $ sudo docker ps -a To remove all orphaned containers: $ sudo docker rm $(sudo docker ps -a -q) To enter inside a container in execution: $ sudo docker exec -it name_container /bin/sh "],["machine-learning-concepts.html", "Chapter 5 Machine Learning Concepts 5.1 Introduction 5.2 Artificial Intelligence vs. Machine Learning 5.3 Supervised learning 5.4 Unsupervised learning", " Chapter 5 Machine Learning Concepts 5.1 Introduction Have you ever asked yourself what is the difference between Artificial Intelligence and Machine Learning? What about between supervised and unsupervised learning? Well, that's not surprising at all because trying to find out the right answer within the huge ocean of information that is the Internet, can become a really daunting task. In this post, we will try first to define the most widely used Machine Learning concepts and finally trying to give clarifying examples of each one of them to try to help in the understanding of their meanings. 5.2 Artificial Intelligence vs. Machine Learning What is the difference between Artificial Intelligence and Machine Learning? Artificial Intelligence is the concept of machines being able to perform tasks in a way that we would consider &quot;smart&quot;. Machine Learning however is the current application of AI, where we just give machines access to data and let them learn for themselves (source Forbes). The Machine Learning concept comprises different techniques whereby it is possible to make machines learning from diverse sets of data. Among the most important ones, we can highlight supervised learning and unsupervised learning. 5.3 Supervised learning When the training data - the data we want machines learning about - comprises not only the input vectors but also their corresponding target vectors. 5.3.1 Classification Classification is a supervised learning method used when the target vectors consist of a finite number of discrete categories. The iris dataset available in R, for instance, can be used in classification problems because it provides different input vectors (&quot;Sepal.Length&quot;, &quot;Sepal.Width&quot;, &quot;Petal.Length&quot; and &quot;Petal.With&quot;) and a target vector (&quot;Species&quot;) with a finite number of categories (&quot;setosa&quot;, &quot;versicolor&quot; and &quot;virginica&quot;). &gt; summary(iris) Sepal.Length Sepal.Width Petal.Length Petal.Width Species Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 setosa :50 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 versicolor:50 Median :5.800 Median :3.000 Median :4.350 Median :1.300 virginica :50 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 5.3.2 Regression Regression is also a supervised learning method but only used when the target vectors consist of one or more continuous variables. The longley R dataset is an example of this type of data. It presents a collection of inputs vectors (&quot;GNP.deflator&quot;, &quot;GNP&quot;, &quot;Unemployed&quot;, &quot;Armed.Forces&quot;, &quot;Population&quot;, &quot;Year&quot;) and a numeric vector output (&quot;Employed&quot;). &gt; summary(longley) GNP.deflator GNP Unemployed Armed.Forces Population Year Employed Min. : 83.00 Min. :234.3 Min. :187.0 Min. :145.6 Min. :107.6 Min. :1947 Min. :60.17 1st Qu.: 94.53 1st Qu.:317.9 1st Qu.:234.8 1st Qu.:229.8 1st Qu.:111.8 1st Qu.:1951 1st Qu.:62.71 Median :100.60 Median :381.4 Median :314.4 Median :271.8 Median :116.8 Median :1954 Median :65.50 Mean :101.68 Mean :387.7 Mean :319.3 Mean :260.7 Mean :117.4 Mean :1954 Mean :65.32 3rd Qu.:111.25 3rd Qu.:454.1 3rd Qu.:384.2 3rd Qu.:306.1 3rd Qu.:122.3 3rd Qu.:1958 3rd Qu.:68.29 Max. :116.90 Max. :554.9 Max. :480.6 Max. :359.4 Max. :130.1 Max. :1962 Max. :70.55 5.4 Unsupervised learning When the training data consists of a set of input vectors x without any corresponding target values. The main aim of unsupervised learning problems can be summarised in the following ideas. 5.4.1 Clustering Grouping the input data that share different similarities into clusters - called clustering (a widely known clustering algorithm is K-Means). Below, an example dataset which can be used in a clustering problem: &gt; library(cluster.datasets) &gt; data(acidosis.patients) &gt; summary(acidosis.patients) ph.cerebrospinal.fluid ph.blood hco3.cerebrospinal.fluid hco3.blood co2.cerebrospinal.fluid co2.blood Min. :38.50 Min. :32.80 Min. : 9.80 Min. : 4.20 Min. :17.80 Min. :12.90 1st Qu.:45.67 1st Qu.:37.20 1st Qu.:19.43 1st Qu.:19.00 1st Qu.:40.38 1st Qu.:30.25 Median :48.05 Median :39.55 Median :22.65 Median :23.30 Median :45.25 Median :35.70 Mean :47.52 Mean :41.55 Mean :21.91 Mean :22.72 Mean :45.57 Mean :36.44 3rd Qu.:49.45 3rd Qu.:41.98 3rd Qu.:24.52 3rd Qu.:26.93 3rd Qu.:52.58 3rd Qu.:42.30 Max. :54.90 Max. :81.30 Max. :30.40 Max. :34.80 Max. :69.00 Max. :61.40 Image source: MonthOfJulia Day 30: Clustering 5.4.2 Density estimation Determine the distribution of data within the input space, known as density estimation. In other words, the aim of density estimation is to use statistical models to find an underlying probability distribution that is the main reason of the observed variables. A widely known density estimation algorithm is Kernel Density Estimation (KDE). Although KDE algorithm has a very intimidating name, it can be used to visualize the continuous &quot;shape&quot; of some data instead of using its discrete version through a histogram. Image source: How to visualize a kernel density estimate 5.4.3 Visualization This unsupervised method consist of projecting the data from a high-dimensional space down to two or three dimensions for the purpose of visualization. "],["linear-models.html", "Chapter 6 Linear Models 6.1 Introduction", " Chapter 6 Linear Models 6.1 Introduction What is a linear model? We might have heard about it countless times but, do we really know what is a linear model and what is its purpose? In this post, we will try to find out to find the answers to these questions. Before going deeper into the linear model's details, you may first want to have a look at the [[Machine Learning Terminology|Machine Learning Terminology]] post. "],["references.html", "References", " References "]]

[["github.html", "Chapter 2 GitHub 2.1 Merging two branches with conflicts 2.2 STASH 2.3 Troubleshooting pages of interest", " Chapter 2 GitHub 2.1 Merging two branches with conflicts To force merging two branches that present conflicts, it is possible to indicate which changes are preferred by using a --ours/--theirs flag: First, we checkout to the branch that we want to apply/commit the merge: &gt; git checkout testing &gt; git log --oneline Merging would generate the following error: &gt; git merge testchanges2 warning: Cannot merge binary files: obj/Debug/netcoreapp2.1/CoExp_Web.csprojAssemblyReference.cache (HEAD vs. testchanges2) warning: Cannot merge binary files: obj/Debug/netcoreapp2.1/CoExp_Web.Views.pdb (HEAD vs. testchanges2) warning: Cannot merge binary files: obj/Debug/netcoreapp2.1/CoExp_Web.Views.dll (HEAD vs. testchanges2) warning: Cannot merge binary files: .vs/CoExp_Web/v16/.suo (HEAD vs. testchanges2) Auto-merging obj/Debug/netcoreapp2.1/CoExp_Web.csprojAssemblyReference.cache CONFLICT (content): Merge conflict in obj/Debug/netcoreapp2.1/CoExp_Web.csprojAssemblyReference.cache Auto-merging obj/Debug/netcoreapp2.1/CoExp_Web.Views.pdb CONFLICT (content): Merge conflict in obj/Debug/netcoreapp2.1/CoExp_Web.Views.pdb Auto-merging obj/Debug/netcoreapp2.1/CoExp_Web.Views.dll CONFLICT (content): Merge conflict in obj/Debug/netcoreapp2.1/CoExp_Web.Views.dll Auto-merging libman.json CONFLICT (content): Merge conflict in libman.json Auto-merging Views/Shared/_Layout.cshtml CONFLICT (content): Merge conflict in Views/Shared/_Layout.cshtml Auto-merging Views/Run/Help_Introduction.cshtml Auto-merging Views/Run/Help_Catalogue.cshtml Auto-merging Views/Run/Help_Annotation.cshtml Auto-merging Views/Run/Help.cshtml Auto-merging Views/Run/About.cshtml Auto-merging .vs/CoExp_Web/v16/.suo CONFLICT (content): Merge conflict in .vs/CoExp_Web/v16/.suo Automatic merge failed; fix conflicts and then commit the result. To obtain the detail of the files that present a conflict: &gt; git log --merge &gt; git log --merge commit 29cd34cc267a858fe696e86981e83bd3af1abb85 (testchanges2) Author: Sonia Garcia &lt;43370296+SoniaRuiz@users.noreply.github.com&gt; Date: Tue Nov 24 09:03:14 2020 +0000 commiting .suo file in testchanges2 commit 7319379b1038dc5415cf035f915d91096c70af2f (origin/testchanges2) Author: Sonia Garcia &lt;43370296+SoniaRuiz@users.noreply.github.com&gt; Date: Tue Nov 24 00:47:04 2020 +0000 remove unnecessary libraries commit 5bf600b6f5f1b41b42faaca9173f33efac4958f4 Author: Sonia Garcia &lt;43370296+SoniaRuiz@users.noreply.github.com&gt; Date: Mon Nov 23 23:49:54 2020 +0000 new built commit 1f60b3ffb5b558849fa061efd7af1796380de30c Author: Sonia Garcia &lt;43370296+SoniaRuiz@users.noreply.github.com&gt; Date: Mon Nov 23 23:20:51 2020 +0000 Update .suo commit suo commit d1834c7ed4a83a95e08a148c7945525e3521981c Author: Sonia Garcia &lt;43370296+SoniaRuiz@users.noreply.github.com&gt; Date: Mon Nov 23 23:10:18 2020 +0000 &gt; git merge --no-ff testchanges2 error: Merging is not possible because you have unmerged files. hint: Fix them up in the work tree, and then use &#39;git add/rm &lt;file&gt;&#39; hint: as appropriate to mark resolution and make a commit. fatal: Exiting because of an unresolved conflict. As we want to apply the comming changes, we use the flag &quot;--theirs&quot;, and the paths of the 7 conflictive files are updated: &gt; git checkout --theirs ./* Updated 7 paths from the index Then, we commit the changes of those 7 files and push them to the current repository (the 'testing' repository): &gt; git branch master testchanges testchanges2 * testing &gt; git add ./* &gt; git commit -m &quot;checkout --theirs testing&quot; [testing bcc3b5c] checkout --theirs testing &gt; git push ... &gt; git status On branch testing Your branch is up to date with &#39;origin/testing&#39;. nothing to commit, working tree clean Now, it's time to checkout to the repository we want to merge from and apply the merge: &gt; git checkout testchanges2 Switched to branch &#39;testchanges2&#39; Your branch is ahead of &#39;origin/testchanges2&#39; by 1 commit. (use &quot;git push&quot; to publish your local commits) &gt; git merge testing Updating 29cd34c..bcc3b5c Fast-forward Program.cs | 2 +- Properties/launchSettings.json | 4 ++-- Views/Run/About.cshtml | 18 +++++++++--------- Views/Run/Help.cshtml | 4 ++-- Views/Run/Help_Annotation.cshtml | 4 ++-- Views/Run/Help_Catalogue.cshtml | 4 ++-- Views/Run/Help_Introduction.cshtml | 4 ++-- 7 files changed, 20 insertions(+), 20 deletions(-) &gt; git checkout testing Switched to branch &#39;testing&#39; Your branch is up to date with &#39;origin/testing&#39;. &gt; git merge testchanges2 Already up to date. Once the merge is done, we can apply the commit to the 'testing' repository and push the changes. After that, both repositories ('testchanges2' and 'testing') could be considered as merged, being the final result of their merge stored within the 'testing' repository: &gt; git add ./* &gt; git commit -m &quot;testing version with the plot&quot; [testing 7c2f7dd] testing version with the plot 18 files changed, 90 deletions(-) ... &gt; git push origin testing ... 2.2 STASH When we are working on our GitHub project, we may want to backup some of our changes. However, it is possible that those changes are not stable yet, or we think they are not ready to be committed into our repository. The stash command creates a backup copy of our changes, and keeps it ready to be committed into the repo once we feel it is ready. It might happen that, once we think the stash is ready to be committed, GitHub doesn't allow us to do so because there are some 'untracked' files on it. The only way I have found to deal with this issue, is to upload my stash into a brand new repo, and finally merge the new repo with the one I was intending to commit the changes to originally. 2.3 Troubleshooting pages of interest This Merge a branch in Git Meaning of 'ours' and 'their' in Git.) "]]
